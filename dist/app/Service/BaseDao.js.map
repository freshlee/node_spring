{"version":3,"sources":["../../../src/app/Service/BaseDao.js"],"names":["BaseDao","connection","mysql","createConnection","host","user","password","database","obj","keyList","valueList","Object","entries","map","key","item","push","console","log","tableName","join","Promise","resolve","reject","query","error","results","fields"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;IACqBA,O;AACjB,uBAAe;AAAA;;AACX,aAAKC,UAAL,GAAkBC,gBAAMC,gBAAN,CAAuB;AACrCC,kBAAW,WAD0B;AAErCC,kBAAW,MAF0B;AAGrCC,sBAAW,MAH0B;AAIrCC,sBAAW;AAJ0B,SAAvB,CAAlB;AAMH;;;;kCACUC,G,EAAK;AAAA;;AACZ,gBAAMC,UAAU,EAAhB;AACA,gBAAMC,YAAY,EAAlB;AACAC,mBAAOC,OAAP,CAAeJ,GAAf,EAAoBK,GAApB,CAAwB,gBAAiB;AAAA;AAAA,oBAAfC,GAAe;AAAA,oBAAVC,IAAU;;AACrCN,wBAAQO,IAAR,CAAaF,GAAb;AACA,oBAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC1BL,8BAAUM,IAAV,QAAmBD,IAAnB;AACH,iBAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACjCL,8BAAUM,IAAV,CAAeD,IAAf;AACH,iBAFM,MAEA;AACH;AACH;AACJ,aATD;AAUAE,oBAAQC,GAAR,kBAA2B,KAAKC,SAAhC,UAA8CV,QAAQW,IAAR,CAAa,GAAb,CAA9C,iBAA2EV,UAAUU,IAAV,CAAe,GAAf,CAA3E;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKtB,UAAL,CAAgBuB,KAAhB,mCAAsDf,QAAQW,IAAR,CAAa,GAAb,CAAtD,iBAAmFV,UAAUU,IAAV,CAAe,GAAf,CAAnF,SAA4G,UAACK,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACpI,wBAAIF,KAAJ,EAAW;AACPF,+BAAOE,KAAP;AACH,qBAFD,MAEO;AACHH,gCAAQI,OAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;;;;kBAhCgB1B,O","file":"BaseDao.js","sourcesContent":["import mysql from 'mysql'\r\nexport default class BaseDao {\r\n    constructor () {\r\n        this.connection = mysql.createConnection({\r\n            host     : 'localhost',\r\n            user     : 'root',\r\n            password : 'root',\r\n            database : 'test'\r\n        })\r\n    }\r\n    insertObj (obj) {\r\n        const keyList = []\r\n        const valueList = []\r\n        Object.entries(obj).map(([key, item]) => {\r\n            keyList.push(key)\r\n            if (typeof item === 'string') {\r\n                valueList.push(`'${item}'`)\r\n            } else if (typeof item === 'number') {\r\n                valueList.push(item)\r\n            } else {\r\n                return\r\n            }\r\n        })\r\n        console.log(`INSERT INTO ${this.tableName} (${keyList.join(',')}) VALUES(${valueList.join(',')});`)\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query(`INSERT INTO overtime_record (${keyList.join(',')}) VALUES(${valueList.join(',')});`, (error, results, fields) => {\r\n                if (error) {\r\n                    reject(error)\r\n                } else {\r\n                    resolve(results)\r\n                }\r\n            })          \r\n        })\r\n    }\r\n}"]}